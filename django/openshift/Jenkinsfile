// This file is part of the research.fi API service
//
// Copyright 2019 Ministry of Education and Culture, Finland
//
// :author: CSC - IT Center for Science Ltd., Espoo Finland servicedesk@csc.fi
// :license: MIT
pipeline {
  agent {
    node {
      label 'nodejs' 
    }
  }

  options {
    timeout(time: 15, unit: 'MINUTES') 
  }

  stages {

    /*
    Build image using build config "researchfi-api-build".
    After build is complete, OpenShift's image change trigger automatically updates devel deployment.
    Wait until devel pod is ready. 
    */
    stage('Build image') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              // Get build config
              def buildConfig = openshift.selector("bc", "researchfi-api-build")
              // Start build and display logs
              buildConfig.startBuild().logs("-f")
            }
          }
        }
      }
    }

    /*
    Wait until devel deployment is ready.
    At this point the devel environment should be deploying, triggered by a new image from previous step. 
    */
    stage('Wait devel deployment') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              // Get object of pod running the devel image
              def dcObj = openshift.selector("dc", "researchfi-api-devel-deployment").object()
              def podSelector = openshift.selector("pod", [deployment: "researchfi-api-devel-deployment-${dcObj.status.latestVersion}"])
              // Wait until pod is ready
              podSelector.untilEach {
                return it.object().status.containerStatuses[0].ready
              }
            }
          }
        }
      }
    }

    /*
    Run Python unit test in devel pod.
    */
    stage('Unit test') {
      steps {
        script {
          // Get name of the pod running the devel image
          def podname = sh(script: "oc get pod --selector deploymentconfig=researchfi-api-devel-deployment -o jsonpath='{.items[0].metadata.name}'", returnStdout: true)

          // Execute python unit test in pod. Test result will be output to file 'result.xml'.
          sh(script: "oc exec ${podname} -- bash -c 'cd webapps && python manage.py test'", returnStdout: true)

          // Copy the test result XML from pod to Jenkins instance.
          sh(script: "oc rsync ${podname}:/opt/app-root/src/webapps/portalapi/unittest_results/result.xml .", returnStdout: true)

          // Record test result to Jenkins.
          junit 'result.xml'
        }
      }
    }

    /*
    Deploy to production.
    Confirm deployment by prompting user.
    Tag the devel image with production tag. This triggers production deployment in OpenShift.
    */
    stage('Deploy to production') {
      steps {
        timeout(time: 12, unit: 'HOURS') {
          input message: "Deploy to production?", ok: "Deploy"
        }
        script {
          openshift.withCluster() {
            openshift.withProject() {
              openshift.tag("researchfi-api-devel:latest", "researchfi-api-production:latest")
            }
          }
        }
      }
    }
  }
}